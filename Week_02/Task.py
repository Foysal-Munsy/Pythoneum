# -*- coding: utf-8 -*-
"""G_22-47225-1_Week 02 .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JjPTN3X6zWnAt3ZJQAyyAa6sDUBhfBFG

# About this notebook
<p style="text-align: justify"> Here, you will learn the basic statements of python and function. Some codes will be given for demonstration. Some other codes, you will do as excercise.</p>

## Submission
<p style="text-align: justify">After completing the practice codes and exercises, download the notebook (.pynb file) and submit the notebook  to MS Teams inbox in the class period</p>
<p> 1.<b> You must submit your own code</b>. If similarity found negative marking will be given.</p>
<p> 2. Modify the file name writing your section and ID at the beigining of the file name. <b>Example: F_20-45961-3_Week 01.ipynb</b></p>
<p> 3. Other file format (except .pynb) will not be accepted.</p>

# User Input
"""

a = 100
print(a)

a = input()
print(a)

a = input('Enter a value: ') # always returns string
print('The given value is '+ a)
print(type(a))

a = int(input('Enter a number: ')) # returns string but converted to int
print('The result is', a+11)
print(type(a))

while True:
  a = input('Enter your Birth Year:')
  if a.isdigit():
    print('You are ' + str(2022-int(a)) + ' years old')
    print(2023-int(a))
    break
  print('WRONG INPUT')

"""# if statement
There can be zero or more elif parts, and the else part is optional. The keyword ‘elif’ is short for ‘else if’
"""

# indent
i = 6
if i < 5: # () not required, {} not required
  print('okay')
  print('fine')
else:
  print('bad')
print('not okay') # will be executed in each run

x = int(input("Please enter an integer: "))
if x < 0:
    x = 0
    print('Negative changed to zero')
elif x == 0:
    print('Zero')
elif x == 1:
    print('Single')
else:
  print('More')

"""<b>Exercise 1:</b> Input a course mark (0-100) from user and use the <b>if</b> statement to print corresponding grade."""

# code here
x = int(input("Please enter your marks: "))
if x<=100 and x>=90:
  print('A+')
elif x<90 and x>=85:
  print('A')
elif x<85 and x>=80:
  print('B+')
elif x<80 and x>=75:
  print('B')
elif x<75 and x>=70:
  print('C+')
elif x<70 and x>=65:
  print('C')
elif x<65 and x>=60:
  print('D+')
elif x<60 and x>=55:
  print('D')
else:
  print('F')

"""# for statement
<p style="text-align: justify">The for statement in Python differs a bit from what you may be used to in C or C++. Rather than always giving the user the ability to define both the iteration step and halting condition, Python’s for statement iterates over the items of any sequence (a list or a string), in the order that they appear in the sequence.</p>
"""

# Measure some strings:
words = ['cat', 'window', 'dhaka','ctg']

for w in words:
    print('the word is:',w)

words = ['cat', 'window', 'dhaka','ctg']
for i in range(len(words)):
    print('the word is:',words[i])

list(range(2,10))

numbers = [3, 66, 88, 98,77]

for n in numbers:
    print(n+10)

list(range(5))

"""### The range() Function
If you do need to iterate over a sequence of numbers, the built-in function range() comes in handy. It generates arithmetic progressions:
"""

# repeated for 0 to 4
# for(i=0;i<5;i++)
for i in range(0,20,2):
    print(i)

"""<p style="text-align: justify">The given end point is never part of the generated sequence; range(10) generates 10 values, the legal indices for items of a sequence of length 10. It is possible to let the range start at another number, or to specify a different increment (even negative; sometimes this is called the ‘step’):</p>"""

list(range(5, 10))

list(range(0, 10, 3))

list(range(10, 2, -1))

list(range(-10, -101, -30))

for i in range(len(numbers)):
    print(i, numbers[i])

for i in range(2,100,5):
    print(i,end=',')

"""<b>Exercise 2:</b> Print all the even numbers between 0 to 100 using <b>for loop</b> and <b>range</b>."""

# code here
for i in range(0,101,2):
  # if i%2==0:
    print(i)

country = "bangladesh"
for c in country:
    print(c,end=' ')

"""# Functions
<p style="text-align: justify">The keyword def introduces a function definition. It must be followed by the function name and the parenthesized list of formal parameters. The statements that form the body of the function start at the next line, and must be indented.</p>
"""

def operate(a, b):
  print(str(a) + ' + ' + str(b) + ' = ' + str(a+b))
  print(str(a) + ' - ' + str(b) + ' = ' + str(a-b))
  print(str(a) + ' x ' + str(b) + ' = ' + str(a*b))
  print(str(a) + ' / ' + str(b) + ' = ' + str(a/b))

operate(91,5)

operate(5,2)

def fib(n):    # write Fibonacci series up to n
    lst = [0,1]
    a, b = 0, 1
    while True:
        #print(a, end=' ')
        a, b = b, a+b
        if b < n:
          lst.append(b)
        else:
          break
        #print()
    return lst

# Now call the function we just defined:
r = fib(1000)
print(r)

# define method
def addnumbers(a, b): # add numbers and return result
    # logic
    c = a + b
    return c

addnumbers([2],[33])

y = addnumbers('8ppp', '9') # use or call method
print(y)

addnumbers([33,77], [66])

# add list values
def addValues(num):
    sum = 0
    for n in num:
        sum = sum+ int(n)
    return sum

print(addValues('1234'))

addValues([])

v = [5, 4,12, 7]
addValues(v)



v = [5, 4,12, 7, 5, 4,12, 7, 5, 4,12, 7]
addValues(v)

# method/function
def multiTable(n, r=10):
    for i in range(1,r+1):
        print("{}x{}={}".format(n,i,n*i))

multiTable(8)

multiTable(15)

"""<b>Exercise 3:</b> Define a <b>method/function</b> which will take two lists of numbers and returns a list (sum of two lists)
<p>Example:<br>
    Input: [3,4,5,1] and [6,7,2,8]<br>
    output: [9,11,7,9]</p>

"""

# code here
def sum_of_two_list(num1,num2):
  if len(num1) != len(num2):
    return "You must have same length of list."
  else:
    sum = []
    for i in range(len(num1)):
      sum.append(num1[i] + num2[i])
    return sum
# input part
n1=[]
n2=[]
n = int(input("Enter the number of elements for the list1: "))
for i in range(n):
  n1.append(int(input()))
nn = int(input("Enter the number of elements for the list2: "))
for i in range(nn):
  n2.append(int(input()))
# n1 = [1,2,3]
# n2=[4,5,6]

print(sum_of_two_list(n1,n2))

"""<b> Exercise 4:</b> Write a <b>method</b> which will take the <b>full name</b> as input and return both the first name and last name.
<p>Example:<br>
    Input: Arafat Rahman Sunny<br>
    Output: First name: Arafat, Last name: Sunny</p>
"""

# code here
def first_last(name):
  split = name.split()
  first = split[0]
  last = split[-1]
  return(first , last)
# input part
a= input()
print(first_last(a))

"""# Output Formatting (Optional)
Go to the [link](https://docs.python.org/3/tutorial/inputoutput.html#formatted-string-literals) and practice the codes below.
"""

# code here
